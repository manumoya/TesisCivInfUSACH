{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 532,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports necesarios\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['figure.figsize'] = (15, 8)\n",
    "plt.style.use('ggplot')\n",
    "\n",
    "#import statsmodels.api as sm\n",
    "\n",
    "#cargamos los datos de entrada\n",
    "df = pd.read_csv(\"/Users/manuelmoya/Documents/USACH/2019-1er/Tesis/1.Desarrollo/05.AnalisisDatos/Datos/wf1_train.csv\",index_col=0,sep=\",\")\n",
    "#veamos cuantas dimensiones y registros contiene"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Descripción básica del dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 533,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hors</th>\n",
       "      <th>ws</th>\n",
       "      <th>wd</th>\n",
       "      <th>anno</th>\n",
       "      <th>mes</th>\n",
       "      <th>dia</th>\n",
       "      <th>horsObs</th>\n",
       "      <th>wp1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2.93</td>\n",
       "      <td>120.13</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2.96</td>\n",
       "      <td>115.79</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2.81</td>\n",
       "      <td>106.71</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2.73</td>\n",
       "      <td>95.39</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>2.87</td>\n",
       "      <td>88.50</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   hors    ws      wd  anno  mes  dia  horsObs    wp1\n",
       "4     5  2.93  120.13  2009    7    1        0  0.035\n",
       "5     6  2.96  115.79  2009    7    1        0  0.005\n",
       "6     7  2.81  106.71  2009    7    1        0  0.000\n",
       "7     8  2.73   95.39  2009    7    1        0  0.000\n",
       "8     9  2.87   88.50  2009    7    1        0  0.010"
      ]
     },
     "execution_count": 533,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Descripción filas y columnas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 534,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cantidad de Filas y columnas: (48048, 8)\n",
      "Nombre columnas: Index(['hors', 'ws', 'wd', 'anno', 'mes', 'dia', 'horsObs', 'wp1'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print('Cantidad de Filas y columnas:',df.shape)\n",
    "print('Nombre columnas:',df.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Columnas, tipo de datos y nulos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 535,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 48048 entries, 4 to 104783\n",
      "Data columns (total 8 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   hors     48048 non-null  int64  \n",
      " 1   ws       48048 non-null  float64\n",
      " 2   wd       48048 non-null  float64\n",
      " 3   anno     48048 non-null  int64  \n",
      " 4   mes      48048 non-null  int64  \n",
      " 5   dia      48048 non-null  int64  \n",
      " 6   horsObs  48048 non-null  int64  \n",
      " 7   wp1      48048 non-null  float64\n",
      "dtypes: float64(3), int64(5)\n",
      "memory usage: 3.3 MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 536,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48048"
      ]
     },
     "execution_count": 536,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 537,
   "metadata": {},
   "outputs": [],
   "source": [
    "#def reescalar(num):\n",
    "#    num_str = num*30\n",
    "#    return int(num_str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 538,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Actualizar date\n",
    "#df['wp1_esc'] = df['wp1'].apply(reescalar)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 539,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 540,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_plot = df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 492,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_borrar = df[(df['ws']>7.0) & (df['wp1']<0.1)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']>7.5) & (df['wp1']<0.2)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']>8) & (df['wp1']<0.3)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "\n",
    "df_borrar = df[(df['ws']>8.5) & (df['wp1']<0.4)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']>9) & (df['wp1']<0.5)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']>9.5) & (df['wp1']<0.6)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']>10) & (df['wp1']<0.7)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']>10.5) & (df['wp1']<0.75)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']>11) & (df['wp1']<0.85)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']>11.5)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "\n",
    "#df_borrar = df[(df['ws']>12)] \n",
    "#df = df.drop(df_borrar.index) \n",
    "\n",
    "#df_borrar = df[(df['ws']>10) & (df['wp1']<0.6)] \n",
    "#df = df.drop(df_borrar.index) \n",
    "\n",
    "#df_borrar = df[(df['ws']>9) & (df['wp1']<0.6)] \n",
    "#df = df.drop(df_borrar.index) \n",
    "\n",
    "#df_borrar = df[(df['ws']>11) & (df['wp1']<0.8)] \n",
    "#df = df.drop(df_borrar.index) \n",
    "\n",
    "#df_borrar = df[(df['ws']>8) & (df['wp1']<0.2)] \n",
    "#df = df.drop(df_borrar.index)\n",
    "\n",
    "# ===================\n",
    "\n",
    "df_borrar = df[(df['ws']<0.5) & (df['wp1']>0.1)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']<1) & (df['wp1']>0.2)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']<1.5) & (df['wp1']>0.3)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']<2) & (df['wp1']>0.5)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']<2.5) & (df['wp1']>0.6)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "\n",
    "df_borrar = df[(df['ws']<3) & (df['wp1']>0.7)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']<3.5) & (df['wp1']>0.75)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']<4) & (df['wp1']>0.8)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "df_borrar = df[(df['ws']<5) & (df['wp1']>0.9)] \n",
    "df = df.drop(df_borrar.index)\n",
    "\n",
    "\n",
    "#df_borrar = df[(df['ws']<2) & (df['wp1']>0.6)] \n",
    "#df = df.drop(df_borrar.index) \n",
    "\n",
    "#df_borrar = df[(df['ws']<1.8) & (df['wp1']>0.4)] \n",
    "#df = df.drop(df_borrar.index) \n",
    "\n",
    "#df_borrar = df[(df['ws']<1) & (df['wp1']>0.2)] \n",
    "#df = df.drop(df_borrar.index) \n",
    "\n",
    "#df_borrar = df[(df['ws']<3) & (df['wp1']>0.7)] \n",
    "#df = df.drop(df_borrar.index) \n",
    "\n",
    "#df_borrar = df[(df['ws']<3.5) & (df['wp1']>0.8)] \n",
    "#df = df.drop(df_borrar.index) \n",
    "\n",
    "\n",
    "\n",
    "# & (df['anno']==2009) & (df['mes']==7)\n",
    "\n",
    "#df_plot = df\n",
    "#df_plot.drop(['wd','anno','mes'], axis=1, inplace=True)\n",
    "#df_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 541,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hors</th>\n",
       "      <th>ws</th>\n",
       "      <th>wd</th>\n",
       "      <th>anno</th>\n",
       "      <th>mes</th>\n",
       "      <th>dia</th>\n",
       "      <th>horsObs</th>\n",
       "      <th>wp1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2.93</td>\n",
       "      <td>120.13</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2.96</td>\n",
       "      <td>115.79</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2.81</td>\n",
       "      <td>106.71</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2.73</td>\n",
       "      <td>95.39</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>2.87</td>\n",
       "      <td>88.50</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104779</th>\n",
       "      <td>44</td>\n",
       "      <td>5.66</td>\n",
       "      <td>121.95</td>\n",
       "      <td>2012</td>\n",
       "      <td>6</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0.348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104780</th>\n",
       "      <td>45</td>\n",
       "      <td>5.20</td>\n",
       "      <td>120.47</td>\n",
       "      <td>2012</td>\n",
       "      <td>6</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0.338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104781</th>\n",
       "      <td>46</td>\n",
       "      <td>4.24</td>\n",
       "      <td>120.96</td>\n",
       "      <td>2012</td>\n",
       "      <td>6</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0.327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104782</th>\n",
       "      <td>47</td>\n",
       "      <td>3.13</td>\n",
       "      <td>122.81</td>\n",
       "      <td>2012</td>\n",
       "      <td>6</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0.317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104783</th>\n",
       "      <td>48</td>\n",
       "      <td>2.31</td>\n",
       "      <td>123.00</td>\n",
       "      <td>2012</td>\n",
       "      <td>6</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0.306</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>48048 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        hors    ws      wd  anno  mes  dia  horsObs    wp1\n",
       "4          5  2.93  120.13  2009    7    1        0  0.035\n",
       "5          6  2.96  115.79  2009    7    1        0  0.005\n",
       "6          7  2.81  106.71  2009    7    1        0  0.000\n",
       "7          8  2.73   95.39  2009    7    1        0  0.000\n",
       "8          9  2.87   88.50  2009    7    1        0  0.010\n",
       "...      ...   ...     ...   ...  ...  ...      ...    ...\n",
       "104779    44  5.66  121.95  2012    6   26        0  0.348\n",
       "104780    45  5.20  120.47  2012    6   26        0  0.338\n",
       "104781    46  4.24  120.96  2012    6   26        0  0.327\n",
       "104782    47  3.13  122.81  2012    6   26        0  0.317\n",
       "104783    48  2.31  123.00  2012    6   26        0  0.306\n",
       "\n",
       "[48048 rows x 8 columns]"
      ]
     },
     "execution_count": 541,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df_plot = df_plot.drop_duplicates() \n",
    "df_plot =df\n",
    "df_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 542,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48048"
      ]
     },
     "execution_count": 542,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 543,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_plot = df_plot.values\n",
    "ws = data_plot[:,1]\n",
    "wp1 = data_plot[:,7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 544,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.93, 2.96, 2.81, ..., 4.24, 3.13, 2.31])"
      ]
     },
     "execution_count": 544,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ws"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 545,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.035, 0.005, 0.   , ..., 0.327, 0.317, 0.306])"
      ]
     },
     "execution_count": 545,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wp1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 546,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(ws, wp1, \"ro\")\n",
    "plt.xlabel(\"Velocidad Viento\")\n",
    "plt.ylabel(\"Energia Generada\")\n",
    "plt.axis([0, 15, 0, 1.2, ])\n",
    "#plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Descripción estadística de los datos numéricos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hors</th>\n",
       "      <th>ws</th>\n",
       "      <th>wd</th>\n",
       "      <th>anno</th>\n",
       "      <th>mes</th>\n",
       "      <th>dia</th>\n",
       "      <th>horsObs</th>\n",
       "      <th>wp1</th>\n",
       "      <th>wp1_esc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>47424.000000</td>\n",
       "      <td>47424.000000</td>\n",
       "      <td>47424.000000</td>\n",
       "      <td>47424.000000</td>\n",
       "      <td>47424.000000</td>\n",
       "      <td>47424.000000</td>\n",
       "      <td>47424.0</td>\n",
       "      <td>47424.000000</td>\n",
       "      <td>47424.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>26.408380</td>\n",
       "      <td>4.083986</td>\n",
       "      <td>144.396981</td>\n",
       "      <td>2010.484354</td>\n",
       "      <td>6.546242</td>\n",
       "      <td>15.674237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.252106</td>\n",
       "      <td>7.122723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>12.697202</td>\n",
       "      <td>1.812087</td>\n",
       "      <td>93.435493</td>\n",
       "      <td>0.954994</td>\n",
       "      <td>3.452677</td>\n",
       "      <td>8.788245</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.238858</td>\n",
       "      <td>7.111091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>15.000000</td>\n",
       "      <td>2.790000</td>\n",
       "      <td>72.590000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.060000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>26.000000</td>\n",
       "      <td>3.750000</td>\n",
       "      <td>122.205000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.180000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>5.120000</td>\n",
       "      <td>196.450000</td>\n",
       "      <td>2011.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.379000</td>\n",
       "      <td>11.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>48.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>359.980000</td>\n",
       "      <td>2012.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.947000</td>\n",
       "      <td>28.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               hors            ws            wd          anno           mes  \\\n",
       "count  47424.000000  47424.000000  47424.000000  47424.000000  47424.000000   \n",
       "mean      26.408380      4.083986    144.396981   2010.484354      6.546242   \n",
       "std       12.697202      1.812087     93.435493      0.954994      3.452677   \n",
       "min        5.000000      0.020000      0.020000   2009.000000      1.000000   \n",
       "25%       15.000000      2.790000     72.590000   2010.000000      4.000000   \n",
       "50%       26.000000      3.750000    122.205000   2010.000000      7.000000   \n",
       "75%       37.000000      5.120000    196.450000   2011.000000     10.000000   \n",
       "max       48.000000     12.000000    359.980000   2012.000000     12.000000   \n",
       "\n",
       "                dia  horsObs           wp1       wp1_esc  \n",
       "count  47424.000000  47424.0  47424.000000  47424.000000  \n",
       "mean      15.674237      0.0      0.252106      7.122723  \n",
       "std        8.788245      0.0      0.238858      7.111091  \n",
       "min        1.000000      0.0      0.000000      0.000000  \n",
       "25%        8.000000      0.0      0.060000      1.000000  \n",
       "50%       16.000000      0.0      0.180000      5.000000  \n",
       "75%       23.000000      0.0      0.379000     11.000000  \n",
       "max       31.000000      0.0      0.947000     28.000000  "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlación entre variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 551,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hors</th>\n",
       "      <th>ws</th>\n",
       "      <th>wd</th>\n",
       "      <th>anno</th>\n",
       "      <th>mes</th>\n",
       "      <th>dia</th>\n",
       "      <th>horsObs</th>\n",
       "      <th>wp1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>hors</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.059402</td>\n",
       "      <td>0.006871</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-9.100423e-20</td>\n",
       "      <td>-1.785205e-17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.020660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ws</th>\n",
       "      <td>5.940212e-02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.165244</td>\n",
       "      <td>-0.008180</td>\n",
       "      <td>-1.079923e-02</td>\n",
       "      <td>1.022705e-02</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.599818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wd</th>\n",
       "      <td>6.870667e-03</td>\n",
       "      <td>-0.165244</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.019848</td>\n",
       "      <td>-2.148615e-02</td>\n",
       "      <td>5.307269e-02</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.170815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>anno</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-0.008180</td>\n",
       "      <td>-0.019848</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-4.555529e-01</td>\n",
       "      <td>-1.323925e-02</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.104608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mes</th>\n",
       "      <td>-9.100423e-20</td>\n",
       "      <td>-0.010799</td>\n",
       "      <td>-0.021486</td>\n",
       "      <td>-0.455553</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.091359e-02</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.082764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dia</th>\n",
       "      <td>-1.785205e-17</td>\n",
       "      <td>0.010227</td>\n",
       "      <td>0.053073</td>\n",
       "      <td>-0.013239</td>\n",
       "      <td>1.091359e-02</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.007942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>horsObs</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wp1</th>\n",
       "      <td>2.066010e-02</td>\n",
       "      <td>0.599818</td>\n",
       "      <td>-0.170815</td>\n",
       "      <td>0.104608</td>\n",
       "      <td>-8.276362e-02</td>\n",
       "      <td>7.941825e-03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 hors        ws        wd      anno           mes  \\\n",
       "hors     1.000000e+00  0.059402  0.006871  0.000000 -9.100423e-20   \n",
       "ws       5.940212e-02  1.000000 -0.165244 -0.008180 -1.079923e-02   \n",
       "wd       6.870667e-03 -0.165244  1.000000 -0.019848 -2.148615e-02   \n",
       "anno     0.000000e+00 -0.008180 -0.019848  1.000000 -4.555529e-01   \n",
       "mes     -9.100423e-20 -0.010799 -0.021486 -0.455553  1.000000e+00   \n",
       "dia     -1.785205e-17  0.010227  0.053073 -0.013239  1.091359e-02   \n",
       "horsObs           NaN       NaN       NaN       NaN           NaN   \n",
       "wp1      2.066010e-02  0.599818 -0.170815  0.104608 -8.276362e-02   \n",
       "\n",
       "                  dia  horsObs       wp1  \n",
       "hors    -1.785205e-17      NaN  0.020660  \n",
       "ws       1.022705e-02      NaN  0.599818  \n",
       "wd       5.307269e-02      NaN -0.170815  \n",
       "anno    -1.323925e-02      NaN  0.104608  \n",
       "mes      1.091359e-02      NaN -0.082764  \n",
       "dia      1.000000e+00      NaN  0.007942  \n",
       "horsObs           NaN      NaN       NaN  \n",
       "wp1      7.941825e-03      NaN  1.000000  "
      ]
     },
     "execution_count": 551,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hors</th>\n",
       "      <th>ws</th>\n",
       "      <th>wd</th>\n",
       "      <th>anno</th>\n",
       "      <th>mes</th>\n",
       "      <th>wp1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2.93</td>\n",
       "      <td>120.13</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>0.035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2.96</td>\n",
       "      <td>115.79</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2.81</td>\n",
       "      <td>106.71</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2.73</td>\n",
       "      <td>95.39</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>2.87</td>\n",
       "      <td>88.50</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   hors    ws      wd  anno  mes    wp1\n",
       "4     5  2.93  120.13  2009    7  0.035\n",
       "5     6  2.96  115.79  2009    7  0.005\n",
       "6     7  2.81  106.71  2009    7  0.000\n",
       "7     8  2.73   95.39  2009    7  0.000\n",
       "8     9  2.87   88.50  2009    7  0.010"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop(['dia','horsObs'], axis=1, inplace=True)\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hors</th>\n",
       "      <th>ws</th>\n",
       "      <th>wd</th>\n",
       "      <th>anno</th>\n",
       "      <th>mes</th>\n",
       "      <th>wp1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>hors</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.059402</td>\n",
       "      <td>0.006871</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-9.100423e-20</td>\n",
       "      <td>0.020660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ws</th>\n",
       "      <td>5.940212e-02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.165244</td>\n",
       "      <td>-0.008180</td>\n",
       "      <td>-1.079923e-02</td>\n",
       "      <td>0.599818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wd</th>\n",
       "      <td>6.870667e-03</td>\n",
       "      <td>-0.165244</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.019848</td>\n",
       "      <td>-2.148615e-02</td>\n",
       "      <td>-0.170815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>anno</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-0.008180</td>\n",
       "      <td>-0.019848</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-4.555529e-01</td>\n",
       "      <td>0.104608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mes</th>\n",
       "      <td>-9.100423e-20</td>\n",
       "      <td>-0.010799</td>\n",
       "      <td>-0.021486</td>\n",
       "      <td>-0.455553</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-0.082764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wp1</th>\n",
       "      <td>2.066010e-02</td>\n",
       "      <td>0.599818</td>\n",
       "      <td>-0.170815</td>\n",
       "      <td>0.104608</td>\n",
       "      <td>-8.276362e-02</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              hors        ws        wd      anno           mes       wp1\n",
       "hors  1.000000e+00  0.059402  0.006871  0.000000 -9.100423e-20  0.020660\n",
       "ws    5.940212e-02  1.000000 -0.165244 -0.008180 -1.079923e-02  0.599818\n",
       "wd    6.870667e-03 -0.165244  1.000000 -0.019848 -2.148615e-02 -0.170815\n",
       "anno  0.000000e+00 -0.008180 -0.019848  1.000000 -4.555529e-01  0.104608\n",
       "mes  -9.100423e-20 -0.010799 -0.021486 -0.455553  1.000000e+00 -0.082764\n",
       "wp1   2.066010e-02  0.599818 -0.170815  0.104608 -8.276362e-02  1.000000"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'sm' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-19-441ac0f952ef>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mcorr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"mes\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0msm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraphics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_corr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxnames\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'sm' is not defined"
     ]
    }
   ],
   "source": [
    "corr = df.set_index(\"mes\").corr()\n",
    "sm.graphics.plot_corr(corr, xnames=list(corr.columns))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hors</th>\n",
       "      <th>ws</th>\n",
       "      <th>wd</th>\n",
       "      <th>anno</th>\n",
       "      <th>mes</th>\n",
       "      <th>wp1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [hors, ws, wd, anno, mes, wp1]\n",
       "Index: []"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nan_rows = df[df['wp1'].isnull()] \n",
    "nan_rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hors</th>\n",
       "      <th>ws</th>\n",
       "      <th>wd</th>\n",
       "      <th>anno</th>\n",
       "      <th>mes</th>\n",
       "      <th>wp1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2.93</td>\n",
       "      <td>120.13</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>0.035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2.96</td>\n",
       "      <td>115.79</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2.81</td>\n",
       "      <td>106.71</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2.73</td>\n",
       "      <td>95.39</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>2.87</td>\n",
       "      <td>88.50</td>\n",
       "      <td>2009</td>\n",
       "      <td>7</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   hors    ws      wd  anno  mes    wp1\n",
       "4     5  2.93  120.13  2009    7  0.035\n",
       "5     6  2.96  115.79  2009    7  0.005\n",
       "6     7  2.81  106.71  2009    7  0.000\n",
       "7     8  2.73   95.39  2009    7  0.000\n",
       "8     9  2.87   88.50  2009    7  0.010"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df2=df\n",
    "#df2.drop(['anno','mes'], axis=1, inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 548,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_5a12  = df[(df['hors'] <= 12)]\n",
    "df_13a24 = df[(df['hors'] > 12) & (df['hors'] <= 24)]\n",
    "df_25a48 = df[(df['hors'] > 24)]\n",
    "\n",
    "#df.drop(['hors'], axis=1, inplace=True)\n",
    "#df.drop(['hors'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.wp1.plot().get_figure()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_remov_outliers(y):\n",
    "    #y = data['date']\n",
    "    removed_outliers = y.between(y.quantile(.25), y.quantile(.75))\n",
    "    \n",
    "    print(str(y[removed_outliers].size) + \"/\" + str(y.size) + \" data points remain.\") \n",
    "    print(removed_outliers.value_counts())\n",
    "    \n",
    "    \n",
    "    return removed_outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "def del_ouliers (rem_outl, df):\n",
    "    index_names = df[~rem_outl].index # INVERT removed_outliers!!\n",
    "    print(index_names) # The resulting 20 dates to drop.\n",
    "    df.drop(index_names, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19187/37322 data points remain.\n",
      "True     19187\n",
      "False    18135\n",
      "Name: wp1, dtype: int64\n",
      "Int64Index([     4,      5,      6,      8,      9,     10,     11,     12,\n",
      "                13,     14,\n",
      "            ...\n",
      "            104647, 104664, 104674, 104687, 104699, 104700, 104710, 104723,\n",
      "            104746, 104759],\n",
      "           dtype='int64', length=18135)\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 19187 entries, 120 to 104818\n",
      "Data columns (total 8 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   hors     19187 non-null  int64  \n",
      " 1   ws       19187 non-null  float64\n",
      " 2   wd       19187 non-null  float64\n",
      " 3   anno     19187 non-null  int64  \n",
      " 4   mes      19187 non-null  int64  \n",
      " 5   dia      19187 non-null  int64  \n",
      " 6   horsObs  19187 non-null  int64  \n",
      " 7   wp1      19187 non-null  float64\n",
      "dtypes: float64(3), int64(5)\n",
      "memory usage: 1.3 MB\n"
     ]
    }
   ],
   "source": [
    "removed_outliers = get_remov_outliers(df['wp1'])\n",
    "del_ouliers(removed_outliers, df)\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 549,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df.to_csv('/Users/manuelmoya/Documents/USACH/2019-1er/Tesis/1.Desarrollo/05.AnalisisDatos/Datos/wf1_train_fin.csv')\n",
    "df_5a12.to_csv('/Users/manuelmoya/Documents/USACH/2019-1er/Tesis/1.Desarrollo/05.AnalisisDatos/Datos/wf1_train_fin_5a12.csv')\n",
    "df_13a24.to_csv('/Users/manuelmoya/Documents/USACH/2019-1er/Tesis/1.Desarrollo/05.AnalisisDatos/Datos/wf1_train_fin_13a24.csv')\n",
    "df_25a48.to_csv('/Users/manuelmoya/Documents/USACH/2019-1er/Tesis/1.Desarrollo/05.AnalisisDatos/Datos/wf1_train_fin_25a48.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 550,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df.wp1.plot().get_figure()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
