{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicción Final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports necesarios\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['figure.figsize'] = (15, 8)\n",
    "plt.style.use('ggplot')\n",
    "import statsmodels.api as sm\n",
    "\n",
    "from keras.models import load_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cargar Mejor Modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the saved model\n",
    "best_model = load_model('best_model_deep_06_264.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Datos de Entrada"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data de pruebas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "data48 = [[4.09,\n",
    "           0.14, 0.216, 0.281, 0.206, 0.185, 0.246, 0.266, 0.165, 0.01, 0.035,\n",
    "           0.09, 0.115,  0.06,  0.05,  0.03,   0.0,   0.0, 0.04,  0.04,  0.09, \n",
    "          0.125, 0.085, 0.055, 0.085, 0.211, 0.266, 0.185, 0.16, 0.075, 0.175,  \n",
    "           0.12, 0.015,  0.05,  0.07, 0.005,   0.0,  0.03, 0.02, 0.075, 0.105,  \n",
    "           0.16,  0.18, 0.231]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data de Benchmark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data48_bench = [[0.551,\n",
    "           0.551, 0.551, 0.551, 0.551, 0.551, 0.551, 0.551, 0.551, 0.551, 0.551,\n",
    "           0.551, 0.551,  0.06,  0.05,  0.03,   0.0,   0.0, 0.04,  0.04,  0.09, \n",
    "           0.551, 0.551, 0.055, 0.085, 0.211, 0.266, 0.185, 0.16, 0.075, 0.175,  \n",
    "           0.551, 0.551,  0.05,  0.07, 0.005,   0.0,  0.03, 0.02, 0.075, 0.105,  \n",
    "           0.551, 0.551, 0.231]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Proceso de Predicción"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# cambia valores de arreglo\n",
    "# Los valores se mueven una posición menos y la predicción queda en la ultima posición\n",
    "\n",
    "def changeArray(arr,pred):\n",
    "    lar_arr = len(arr[0])\n",
    "    #print(lar_arr)\n",
    "    \n",
    "    for ind in range(lar_arr-1):\n",
    "        if ind > 0:\n",
    "            if (ind-1) < lar_arr-1:\n",
    "                arr[0][ind] = arr[0][ind+1]\n",
    "            #else:\n",
    "            #    if ind == (lar_arr-1):\n",
    "            #        arr[0][ind] = pred\n",
    "            #        print(\"pred: \")   \n",
    "                    \n",
    "    arr[0][lar_arr-1] = pred             \n",
    "    \n",
    "    return arr\n",
    "        \n",
    "\n",
    "def processPredictions(npArr48):\n",
    "    pred_final=[]\n",
    "    for x in range(48):\n",
    "        pred48=best_model.predict(npArr48)\n",
    "        val_pred48 = pred48[0][0]\n",
    "        pred_final.append(val_pred48)\n",
    "\n",
    "        arrNew = changeArray(npArr48,val_pred48)\n",
    "        npArr48 = arrNew\n",
    "\n",
    "        #for x in arrNew[0]:\n",
    "        #    print(x)\n",
    "        #print (\"===============\")\n",
    "        \n",
    "    return pred_final  \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Obtener Predicción Final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.21151927\n",
      "0.20468628\n",
      "0.24903265\n",
      "0.24060118\n",
      "0.2441711\n",
      "0.26037994\n",
      "0.27747282\n",
      "0.2860928\n",
      "0.2949608\n",
      "0.3103011\n",
      "0.23779659\n",
      "0.20221472\n",
      "0.15820974\n",
      "0.11666885\n",
      "0.10520939\n",
      "0.09877556\n",
      "0.08918087\n",
      "0.18040846\n",
      "0.121033005\n",
      "0.014702143\n",
      "0.0464171\n",
      "0.0644029\n",
      "0.0040074405\n",
      "0.00040192806\n",
      "0.027372051\n",
      "0.018415233\n",
      "0.072128356\n",
      "0.10127371\n",
      "0.15261579\n",
      "0.17448409\n",
      "0.18957847\n",
      "0.21259478\n",
      "0.20440419\n",
      "0.24650791\n",
      "0.23907122\n",
      "0.24123645\n",
      "0.25586933\n",
      "0.27231756\n",
      "0.28030086\n",
      "0.2888672\n",
      "0.3039589\n",
      "0.23375599\n",
      "0.19487458\n",
      "0.15423265\n",
      "0.11152297\n",
      "0.0943626\n",
      "0.08601721\n",
      "0.07768373\n"
     ]
    }
   ],
   "source": [
    "npdata48 = np.array(data48)  \n",
    "pred_final_48 =processPredictions(npdata48)\n",
    "\n",
    "cont=1\n",
    "for x in pred_final_48:\n",
    "    print(x)\n",
    "    cont=cont+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
